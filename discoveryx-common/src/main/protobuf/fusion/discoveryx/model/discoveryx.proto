syntax = "proto3";
package fusion.discoveryx.model;

import "google/protobuf/wrappers.proto";
import "google/protobuf/any.proto";
import "scalapb/scalapb.proto";
import "fusion/define.proto";

option (scalapb.options) = {
  collection_type: "scala.collection.immutable.Seq"
};

message ServerStatusQuery {
}
message ServerStatusBO {
    int32 status = 1;
}

// #ChangeType
enum ChangeType {
    // 保存
    CHANGE_SAVE = 0;
    // 添加
    CHANGE_ADD = 1;
    // 删除
    CHANGE_REMOVE = 2;
}
// #ChangeType

////////////////////////////////////////////////////////////////////////////////
// Config
////////////////////////////////////////////////////////////////////////////////

// #ConfigQuery
message ConfigQuery {
    google.protobuf.StringValue group_name = 1;
    repeated string tags = 2;
}
// #ConfigQuery

// #ConfigGet
message ConfigGet {
    string namespace = 1;
    string data_id = 2;
    google.protobuf.StringValue group_name = 3;
}
// #ConfigGet

// #ConfigItem
message ConfigItem {
    string namespace = 1;
    string data_id = 2;
    string group_name = 3;
    string content = 4;
    ConfigType type = 5;
    repeated string tags = 6;
}
// #ConfigItem

// #ConfigQueried
// #ConfigType
enum ConfigType {
    TEXT = 0;
    HOCON = 1;
    JSON = 2;
    YAML = 3;
    PROPERTIES = 4;
    INI = 5;
}
// #ConfigType

message ConfigBasic {
    string data_id = 1;
    string group_name = 2;
    ConfigType type = 3;
}
message ConfigQueried {
    repeated ConfigBasic configs = 1;
    string namespace = 2;
    int32 page = 3;
    int32 size = 4;
    int32 total_elements = 5;
}
// #ConfigQueried

// #ConfigRemove
message ConfigRemove {
    string namespace = 1;
    string data_id = 2;
}
// #ConfigRemove

// #ConfigChangeListen
message ConfigChangeListen {
    string namespace = 1;
    string data_id = 2;
}
// #ConfigChangeListen

// #ConfigChanged
message ConfigChanged {
    fusion.discoveryx.model.ConfigItem config = 1;
    ChangeType change_type = 2;
    int32 version = 3;
}
// #ConfigChanged

// #ConfigReply
message ConfigReply {
    int32 status = 1;
    string message = 2;
    oneof data {
        ConfigItem config = 3;
        ConfigQueried queried = 4;
    }
}
// #ConfigReply

////////////////////////////////////////////////////////////////////////////////
// Instance
////////////////////////////////////////////////////////////////////////////////

enum NamingChangeType {
    NAMING_INIT = 0;
    SERVICE_CREATE = 1;
    SERVICE_MODIFY = 2;
    SERVICE_REMOVE = 3;
    INSTANCE_REGISTER = 4;
    INSTANCE_MODIFY = 5;
    INSTANCE_REMOVE = 6;
    INSTANCE_UNHEALTHY = 7;
    INSTANCE_HEALTHY = 8;
}

message ServiceItem {
    string namespace = 1;
    string serviceName = 2;
    string group_name = 3;
    double protect_threshold = 4;
    map<string, string> metadata = 5;
}

// #Instance

// 健康检查方式
enum HealthyCheckMethod {
    NOT_SET = 0;
    CLIENT_REPORT = 1;
    SERVER_SNIFF = 2;
}

enum HealthyCheckProtocol {
    UNKNOWN = 0;
    UDP = 1;
    TCP = 2;
    HTTP = 3;
}

message Instance {
    // unique id of this instance.
    string instance_id = 1;
    // instance ip
    string ip = 2;
    // instance port
    int32 port = 3;
    // instance weight
    double weight = 4;
    // instance health status
    bool healthy = 5;
    // If instance is enabled to accept request
    bool enabled = 6;
    // If instance is ephemeral
    bool ephemeral = 7;
    // user extended attributes
    map<string, string> metadata = 8;
    // Healthy check method, the default value is HealthyCheckMethod.CLIENT_REPORT
    HealthyCheckMethod healthy_check_method = 9;
    // Healthy check per N seconds
    int32 healthy_check_interval = 10;
    // Unhealthy check count
    int32 unhealthy_check_count = 11;
    // Healthy check protocol
    HealthyCheckProtocol protocol = 12;
    // Whether TLS(HTTPS) is used for gRPC connection, the default value is false.
    bool use_tls = 13;
    // HTTP healthy check uri path.
    string http_path = 14;
}
// #Instance

// #InstanceRegister
message InstanceRegister {
    // Instance namespace.
    string namespace = 1;
    // Instance serviceName.
    string service_name = 2;
    // The instance group name needs to be the same as service group name, otherwise the service group name will be overwritten.
    string group_name = 3;
    // Instance local ip.
    string ip = 4;
    // Instance local port.
    int32 port = 5;
    // Instance query weight, the default value is 1.0.
    double weight = 6;
    // instance health status. If set to true, it will be available immediately. Otherwise, it will be available after the first heartbeat detection is successful. The default value is false.
    bool health = 7;
    // If instance is enabled to accept request, the default value is false.
    bool enable = 8;
    // If instance is ephemeral, the default value is false.
    bool ephemeral = 9;
    // user extended attributes
    map<string, string> metadata = 10;
    // Healthy check method, the default value is HealthyCheckMethod.CLIENT_REPORT
    HealthyCheckMethod healthy_check_method = 11;
    // Healthy check per N seconds
    int32 healthy_check_interval = 12;
    // Unhealthy check count
    int32 unhealthy_check_count = 13;
    // Healthy check protocol
    HealthyCheckProtocol protocol = 14;
    // Whether TLS(HTTPS) is used for gRPC connection, the default value is false.
    bool use_tls = 15;
    // HTTP healthy check uri path.
    string http_path = 16;
}
// #InstanceRegister

// #InstanceModify
message InstanceModify {
    string namespace = 1;
    string service_name = 2;
    string instance_id = 3;
    google.protobuf.StringValue group_name = 4;
    google.protobuf.StringValue ip = 5;
    google.protobuf.Int32Value port = 6;
    // instance weight
    google.protobuf.DoubleValue weight = 7;
    // instance health status
    google.protobuf.BoolValue health = 8;
    // If instance is enabled to accept request
    google.protobuf.BoolValue enable = 9;
    // user extended attributes
    map<string, string> metadata = 10;
    // true：replace old metadata, false: merge old metadata
    bool replace_metadata = 11;
    HealthyCheckMethod healthy_check_method = 12;
    // Healthy check per N seconds
    google.protobuf.Int32Value healthy_check_interval = 13;
    // Unhealthy check count
    google.protobuf.Int32Value unhealthy_check_count = 14;
    // 实例协议
    HealthyCheckProtocol protocol = 15;
    google.protobuf.BoolValue use_tls = 16;
    google.protobuf.StringValue http_path = 17;
}
// #InstanceModify

// #InstanceRemove
message InstanceRemove {
    string namespace = 1;
    string service_name = 2;
    string instance_id = 3;
}
// #InstanceRemove

// #InstanceQuery
message InstanceQuery {
    string namespace = 1;
    string service_name = 2;
    string group_name = 3;
    // only return all healthy instances
    bool all_healthy = 4;
    // only return one healthy instance
    bool one_healthy = 5;
}
// #InstanceQuery

// #ServiceListener
message ServiceListener {
    string namespace = 1;
    string service_name = 2;
}
// #ServiceListener

// #InstanceHeartbeat
message InstanceHeartbeat {
}
// #InstanceHeartbeat

// #ServiceInfo
message ServiceInfo {
    string namespace = 1;
    string service_name = 2;
    string group_name = 3;
    double protect_threshold = 4;
    map<string, string> metadata = 5;
    // 实例数
    int32 instance_total = 6;
    // 健康实例数
    int32 instance_healthy_count = 7;
    repeated Instance instances = 8;
}
// #ServiceInfo

// #ServiceEvent
message ServiceEvent {
    NamingChangeType changeType = 1;
    string namespace = 2;
    string service_name = 3;
    ServiceItem service = 4;
    Instance instance = 5;
}
// #ServiceEvent

// #NamingReply
message NamingReply {
    int32 status = 1;
    string message = 2;
    oneof data {
        Instance instance = 3;
        ServiceInfo service_info = 4;
    }
}
// #NamingReply
